# task 1

import matplotlib.pyplot as plt
import numpy as np

plt.xlabel('x')
plt.ylabel('y')
x = np.linspace(-10, 10, 100)
y1 = 2* np.cos(x - 3) + 5
y2 = 4* np.cos(x - 5) + 8
y3 = 6* np.cos(x - 7) + 11
plt.plot(x, y1, x, y2, x, y3)
plt.show()

# task 2

X1 = a11x1 + a12y1 + a13      X2 - X1 = T, Y2 - Y1 = V
Y1 = a21x1 + a22y1 + a23      x2 - x1 = t, y2 - y1 = v 
X2 = a11x2 + a12y2 + a13      T**2 + V**2 = (a11t + a12v)**2 + 
Y2 = a21x2 + a22y2 + a23  =>  (a21t + a22v)**2                 =>  T**2 + V**2 = t**2 + v**2 чтд
a11**2 + a21**2 = 1           a11**2 + a21**2 = 1                    
a12**2 + a22**2 = 1           a12**2 + a22**2 = 1    
a11a12 + a21a22 = 0           a11a12 + a21a22 = 0 

# task 3

1. import math
   
   def poltodec(r, a):
       T = [r*math.cos(a), r*math.sin(a)]
       print (T) 
 2. import matplotlib.pyplot as plt
    import numpy as np
    
    def roundpol(r, x0, y0):
    x = np.linspace(-r + x0, r + x0, 1000)
    y1 = y0 + np.sqrt(r**2 - (x - x0)**2)
    y2 = y0 -(np.sqrt(r**2 - (x - x0)**2))
    plt.xlabel('x')
    plt.ylabel('y')
    plt.polar(x, y1, x, y2)
    plt.show()
    
  3. import matplotlib.pyplot as plt
     import numpy as np
  def linepol(k, b):
    x = np.linspace(-30, 30, 1000)
    y = k*x + b
    plt.xlabel('x')
    plt.ylabel('y')
    plt.polar(x, y)
    plt.show()
    plt.show()
    
 # task 4
 1.
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import fsolve

plt.xlabel('x')
plt.ylabel('y')
x = np.linspace(-3, 3, 1000)
plt.plot(x, (np.exp(x) - 1)/x + 1)
plt.plot(x, x**2 - 1)
plt.show()

def equations (p):
    x, y = p
    return (y - x **2 + 1, np.exp(x) - x*y + x - 1)
x, y = fsolve(equations, (1,1))
print(x, y) 
x1, y1 = (-1.5818353528958982, 1.5022030836712148)
x2, y2 = (2.6181455730850116, 5.8546862418647185)
x3, y3 = (4.200105841169338, 16.640889077008094)
2. 
x ∈ (-1.5818353528958982, 2.6181455730850116) U (4.200105841169338, + ∞)
y ∈ (1.5022030836712148, 5.8546862418647185) U (16.640889077008094, + ∞)
